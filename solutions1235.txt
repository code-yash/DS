#------------------------------------Q1-----------------------------------------------

#Generate a sample of 100 observations of maxspeed following uniform distribution ranging from
#100 to 120
max_speed<-runif(100,min=100,max=120)

max_speed
#Create a sample of 100 observations of brands drawing from "Tata", "Maruti", "Hyundai" without
#replacement. 

brands<-sample(c("TATA","MARUTI","HYUNDAI"),100,replace=T)
brands
#c. Convert brands to a categorical variable.
brand<-as.factor(brands)
brand
#d. Create a dataframe cars by combining brands and maxspeed.
cars<-cbind(max_speed,brands)
cars<-as.data.frame(cars)
#or
cars<-data.frame(max_speed,brands)
#e. Sort the dataframe according to maxspeed column.
car<-cars[order(cars$max_speed),]
car
#f. Find the mean speed by brand and plot that in a bar chart.
cars<-na.omit(cars)

v1<-tapply(cars$max_speed,cars$brand,mean)
v1
plot(v1)
barplot(v1,main="CARS GRAPH",col=rainbow(length(c)))         
#g. Test the hypothesis that proportion of Maruti in the data is 0.33
x<-length(subset(cars$brand,cars$brand=='Maruti'))

prop.test(x,100,p=0.33,correct=F)




#----------------------------------Q2-----------------------------------------
#Generate a normal distribution of 100 values of radii having mean 14 and sd 2.5
r<-rnorm(100,mean=14,sd=2.5)
r
#b. Using value of pi upto 3 decimal places calculate circumference of above circles
pi<-3.141
c<-(2*pi*r)
c
#or
circum<-function(r){
  c<-2*3.141*r
  return  (c)
}
circumference<-lapply(radii,FUN=function(r)circum(r))
circumference<-as.numeric(circumference)
#c. Attach the two vectors together to form a matrix.
m<-cbind(r,c)
m
class(m)

#dWrite a function that returns following descriptive statistics-mean, median, mode, 1/3rd d. quantile and
#range for the above data.
summary(m)
#e. what is the percentage of observations ranging below 12.5
num1<-length(subset(circle[radii],circle[radii]<12.5))
num2<-length(subset(circle[circumference],circle[circumference]<12.5))

result<-((num1+num2)/200)*100


n1<-length(subset(c[r],c[r]<12.5))
n2<-length(subset(c[c],c[c]<12.5))
p<-((n1+n2)/200)*100
p
#f. Test the hypothesis that mean circumference is 87
t.test(m[c],mu=87)




#=------------------------------------------------------q4------------------------------------------------------------------
#a. Generate a normal distribution of 100 values of sizes having mean 8 and sd 1.3
rnorm(100,mean=8,sd=1.3)
#b. Generate a random sample of 100 values from "trout", "ray", "shrimp"
sample(c("trout","ray","shrimp"),100,replace=TRUE)
#c. Combine the two samples together to form a dataframe.
a<-sample(c(1:10),10)
b<-sample(c(11:20),10)
r<-as.data.frame(cbind(a,b))
r
#or
z<-data.frame(a,b)
class(r)
r1<-merge(a,b)
class(r1)
r1
#Write a function that returns following descriptive statistics-mean, median, mode, 1/3rd d. quantile and
#range for the above data.
summary(z)
#e. Report the percentage of elements that exceed ±2 standard deviations from the mean.


#f. Find the 97% confidence limit of true mean of sizes
t.test(r,conf.level=0.97)


#------------------------------------------Q5 -----------------------------AIR QUALITY---------------------------------------

str(airquality)
a<-attach(airquality)
airquality
#a. R contains a built in dataset airquality, access this data set and find a subset of rows having
#months from November to Jan and only the columns ozone, temp and month.
a<-subset(airquality,((Month%in%8:9)|(Month==5)),select=c("Ozone","Temp","Month"))
a
#b. Find summary statistics including max temperature by month

summary(tapply(Temp,Month,max))
#or
summ<-summary(airquality)
c<-tapply(Temp,Month,max)
cbind(summ,c)

#c. Plot the relation of temperature and ozone adding simple adornments
t<-table(Temp,Ozone)
barplot(t,main="PLOT FOR OZONE AND TEMP",col=rainbow(length(airquality)))
#or
barblot

#or
plot(Temp,Ozone,col=rainbow(length(airquality)),main="OZONE AND TEMP")

#d. Split these strings into words, removing any punctuation symbols: x <- c("Able was I, ere I saw
#Elba!")
x <-c("Able was I, ere I saw Elba!")

#vec <- strsplit(x, '(?<=[!?.])[[:space:]]*', perl = TRUE)
#vec
s<-strsplit(gsub("[[:punct:]]", "", x)," ") 
s
#or
spt<-strsplit(x,'[!,]')
spt

#e. Recombine above and test whether it's a palindrome.



